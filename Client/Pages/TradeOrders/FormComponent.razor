@inject HttpClient _client

<EditForm Model="@tradeorder" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*<fieldset disabled="Disabled">*@
    <div class="form-group">
        <label>Order Date: </label>
        <div>
            <InputDate @bind-Value="@tradeorder.OrderDate" class="form-control" />
            <ValidationMessage For="@(() => tradeorder.OrderDate)" />
        </div>
    </div>
    <div class="form-group">
        <label>Order Time: </label>
        <div>
            <InputText @bind-Value="@tradeorder.OrderTime" class="form-control" />
            <ValidationMessage For="@(() => tradeorder.OrderTime)" />
        </div>
    </div>
    <div class="form-group">
        <label>Delivery Type: </label>
        <div>
            <InputSelect @bind-Value="@tradeorder.DeliveryType" class="form-control" >
                <option value="">-- Select Delivery Type --</option>
                <option value="Store-Pick-Up">Store-Pick-Up</option>
                <option value="Standard-Shipping">Standard-Shipping</option>
            </InputSelect>
            <ValidationMessage For="@(() => tradeorder.DeliveryType)" />
        </div>
    </div>
    <div class="form-group">
        <label>Staff: </label>
        <div>
            <InputSelect @bind-Value="@tradeorder.StaffId" class="form-control">
                <option value="">-- Select Staff --</option>
                @if (Staffs != null)
                {
                    foreach (var staff in Staffs)
                    {
                        <option value="@staff.Id">@staff.FirstName</option>}
                    }
            </InputSelect>
            <ValidationMessage For="@(() => tradeorder.StaffId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="@tradeorder.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.FirstName</option>}
                    }
            </InputSelect>
            <ValidationMessage For="@(() => tradeorder.CustomerId)" />
        </div>
    </div>
    @*</fieldset>*@
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="tradeorders" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public TradeOrder tradeorder { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff> Staffs;
    private IList<Customer> Customers;
    private IList<TradeOrderItem> TradeOrderItems;

    protected async override Task OnInitializedAsync()
    {
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
        TradeOrderItems = await _client.GetFromJsonAsync<List<TradeOrderItem>>($"{Endpoints.TradeOrderItemsEndpoint}");
    }
}
