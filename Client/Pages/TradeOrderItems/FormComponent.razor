@inject HttpClient _client

<EditForm Model="@tradeorderitem" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @*<fieldset disabled="Disabled">*@
    <div class="form-group">
        <label>Order: </label>
        <div>
            <InputSelect @bind-Value="@tradeorderitem.TradeOrderId" class="form-control" >
            <option value="">-- Select Order --</option>
                    @if (TradeOrders != null)
                    {
                        foreach (var tradeorder in TradeOrders)
                            {
                                <option value="@tradeorder.Id">@tradeorder.Customer.FirstName - @tradeorder.OrderDate - @tradeorder.OrderTime</option>
                            }
                    }
                </InputSelect>
            <ValidationMessage For="@(() => tradeorderitem.TradeOrderId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Product: </label>
        <div>
            <InputSelect @bind-Value="@tradeorderitem.ProductId" class="form-control" >
            <option value="">-- Select Product --</option>
                    @if (Products != null)
                    {
                        foreach (var product in Products)
                            {
                                <option value="@product.Id">@product.Name</option>
                            }
                    }
                </InputSelect>
            <ValidationMessage For="@(() => tradeorderitem.ProductId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Quantity: </label>
        <div>
            <InputNumber @bind-Value="@tradeorderitem.Quantity" class="form-control" />
            <ValidationMessage For="@(() => tradeorderitem.Quantity)" />
        </div>
    </div>
    @*</fieldset>*@
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="tradeorderitems" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public TradeOrderItem tradeorderitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Product> Products;
    private IList<TradeOrder> TradeOrders;

    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        TradeOrders = await _client.GetFromJsonAsync<List<TradeOrder>>($"{Endpoints.TradeOrdersEndpoint}");
    }
}
